<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software on christian&#39;s blog.</title>
    <link>http://briones.io/tags/software/</link>
    <description>Recent content in Software on christian&#39;s blog.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>christian@briones.io (Christian Briones)</managingEditor>
    <webMaster>christian@briones.io (Christian Briones)</webMaster>
    <lastBuildDate>Sun, 02 Apr 2017 22:01:49 +0000</lastBuildDate>
    
	<atom:link href="http://briones.io/tags/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>On Duck-Typing</title>
      <link>http://briones.io/posts/2017-04-02-on-ducktyping/</link>
      <pubDate>Sun, 02 Apr 2017 22:01:49 +0000</pubDate>
      <author>christian@briones.io (Christian Briones)</author>
      <guid>http://briones.io/posts/2017-04-02-on-ducktyping/</guid>
      <description>Note: The following is written with Python in mind, but the idea just as easily applies to something like JavaScript with a s/isinstance/instanceof/g, among other things.
Let&amp;rsquo;s say you&amp;rsquo;re writing a database pooling service 1 in Python, and have something like this:
class MyDBPool(object): &amp;#34;&amp;#34;&amp;#34; A database connection pool. &amp;#34;&amp;#34;&amp;#34; def __init__(self): # Some initialization here def get_connection(self): &amp;#34;&amp;#34;&amp;#34; Return a connection to the database. &amp;#34;&amp;#34;&amp;#34; # Your implementation here Unsurprisingly, somewhere within in the rest of your code it&amp;rsquo;s used:</description>
    </item>
    
    <item>
      <title>Getting Lazy with Erlang</title>
      <link>http://briones.io/posts/2016-10-08-getting-lazy-with-erlang/</link>
      <pubDate>Sat, 08 Oct 2016 21:32:57 +0000</pubDate>
      <author>christian@briones.io (Christian Briones)</author>
      <guid>http://briones.io/posts/2016-10-08-getting-lazy-with-erlang/</guid>
      <description>I&amp;rsquo;ve recently been playing around with Haskell again, and not only am I impressed by how natural recursive structures seem within the language - the ease with which you define them is even more impressive.
For the uninitiated, Haskell has a list data type that is lazily evaluated. That is, elements of the list are only evaluated if they&amp;rsquo;re needed to continue the computation. This allows you to do all sorts of neat things like create an infinite list of integers or build a list that refers to itself.</description>
    </item>
    
  </channel>
</rss>